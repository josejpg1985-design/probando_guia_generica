Guía de Supervivencia Git para Novatos (¡Adiós a las Copias de Carpetas!)

¡Hola! Si estás cansado de copiar y pegar carpetas para "respaldar" tu código, ¡has llegado al lugar correcto! Git es la herramienta que te va a cambiar la vida. No te asustes por su fama de complicado; vamos a ir paso a paso, con analogías sencillas.

---

### **¿Qué es Git? (Tu Máquina del Tiempo y Cuaderno de Laboratorio)**

Imagina que Git es como una **máquina del tiempo** para tu código. Te permite:

*   **Guardar versiones** de tu proyecto en cualquier momento.
*   **Volver atrás** a una versión anterior si algo sale mal.
*   **Ver quién hizo qué cambio** y cuándo.

También puedes pensarlo como un **cuaderno de laboratorio muy organizado**. Cada vez que haces un experimento (un cambio en tu código), anotas exactamente qué hiciste y por qué.

---

### **Paso 0: Configuración Inicial (¡Preséntate ante Git!)**

Antes de nada, tienes que presentarte. Git necesita saber quién eres para "firmar" tus cambios. **¡Esto solo se hace una vez en cada computadora!**

*   **Los Comandos:**
    ```bash
    git config --global user.name "Tu Nombre o Alias"
    git config --global user.email "tu_correo@ejemplo.com"
    ```
*   **Recomendación:** Usa el mismo email que usarás en GitHub para que tus contribuciones se asocien a tu perfil.

---

### **Paso 1: Empezar un Proyecto con Git (Abrir tu Cuaderno de Laboratorio)**

*   **El Comando:** `git init`
*   **¿Para qué sirve?** Convierte una carpeta normal en un "repositorio Git".
*   **Cuándo usarlo:** Solo se hace **una vez** por proyecto.

---

### **Paso 2: El Ciclo Básico de Guardado (Tu Rutina Local)**

*   **Comando Esencial: `git status` (El Chismoso de Git)**
    *   **¿Para qué sirve?** Es tu mejor amigo. Te dice exactamente qué está pasando: qué archivos has modificado, cuáles están listos para ser guardados, etc.
    *   **Cuándo usarlo:** ¡Todo el tiempo! `git status` te da claridad.

*   **Comando 1: `git add .` (Poner en la Mesa de Preparación)**
    *   **¿Para qué sirve?** Prepara todos tus cambios para el próximo guardado.
    *   El `.` significa "todos los archivos en esta carpeta y subcarpetas".

*   **Comando 2: `git commit -m "Tu mensaje"` (Hacer la Anotación)**
    *   **¿Para qué sirve?** Guarda definitivamente en tu historial local todo lo que preparaste con `git add`.

---

### **Paso 3: Ignorando Archivos con `.gitignore` (La Lista de Exclusión)**

No quieres guardar todo en tu repositorio. Archivos de caché, bases de datos, o secretos no deben estar ahí.

*   **¿Qué es?** Un archivo de texto llamado `.gitignore` que le dice a Git qué ignorar.
*   **Ejemplo de `.gitignore` para un proyecto Python:**
    ```
    # Archivos de caché de Python
    __pycache__/

    # Bases de datos
    *.db
    *.sqlite3

    # Archivos de entorno (¡muy importante!)
    .env
    ```

*   **¡Ups! Ya guardé un archivo que quería ignorar, ¿y ahora?**
    *   Usa `git rm --cached [archivo]` para que Git lo olvide pero no lo borre de tu PC. Después, haz un commit para guardar este cambio.

---

### **Paso 4: Ver el Historial (Revisar tus Anotaciones)**

*   **El Comando:** `git log`
*   **¿Para qué sirve?** Muestra todas las anotaciones que has hecho, de la más reciente a la más antigua.
    (Presiona `q` para salir)

---

### **Paso 5: Conectar y Subir a GitHub (Tu Respaldo en la Nube)**

Esto conecta tu repositorio local con uno vacío en GitHub y sube tus archivos.

*   **Paso 5.1: Crear el Repositorio en GitHub**
    *   Ve a tu cuenta de GitHub, haz clic en "Create repository".
    *   Dale un nombre, asegúrate de que sea **Público** y **NO** marques las casillas de `README`, `.gitignore` o `license`. Debe estar vacío.
    *   Copia la URL que te da al final (termina en `.git`).

*   **Paso 5.2: Conectar tu local con GitHub**
    *   **Comando:** `git remote add origin [URL_que_copiaste]`
    *   **¿Para qué sirve?** Le dice a tu Git local dónde está su "casa" en la nube. `origin` es el apodo para esa URL.

*   **Paso 5.3: Subir tu código por primera vez**
    *   **Comando:** `git push -u origin main`
    *   **¿Para qué sirve?** Envía todas las anotaciones de tu cuaderno local a la nube (GitHub).
    *   **¡Ojo!** La primera vez que haces esto, se abrirá tu navegador para que inicies sesión y autorices la conexión. Es una medida de seguridad normal y solo pasa una vez.

---

### **El Flujo de Trabajo Diario (Tu Rutina Simplificada en 3 Pasos)**

¡Felicidades! Ya superaste la configuración inicial, que es lo más largo. De ahora en adelante, tu rutina cada vez que trabajes en el proyecto es mucho más sencilla:

*   **Paso 1: Modifica tu código.**
    *   (Programas, corriges errores, añades archivos, etc.)

*   **Paso 2: Guarda tus cambios en tu "cuaderno local".**
    *   `git add .`
    *   `git commit -m "Un mensaje que describa lo que hiciste"`

*   **Paso 3: Sube tu trabajo a GitHub.**
    *   `git push`

¡Y ya está! Ese es el ciclo que repetirás el 99% del tiempo: **Modificas -> Guardas localmente (`add/commit`) -> Subes a la nube (`push`)**.

---

*Otros comandos útiles de la guía original como `git pull` y `git restore` los puedes consultar cuando los necesites.*

---

### **Paso 6: El Flujo de Trabajo Real (El Ciclo Completo que Acabamos de Hacer)**

Hasta ahora, la guía te ha mostrado los comandos por separado. Ahora, vamos a juntar todo en el orden exacto en que lo usas en un día de trabajo normal, justo como lo hicimos nosotros. Este es el flujo que seguirás el 99% del tiempo.

**La idea es simple:** Creas una copia (`rama`) para no tocar el original, haces tus cambios, los propones para que se integren al original y, finalmente, limpias todo.

---

#### **Fase 1: Trabajar en tu computadora**

**Paso 1: Crear una copia para trabajar seguro (Crear una Rama)**
*   **Comando:** `git checkout -b nombre-de-la-rama`
*   **Qué hace:** Crea una "línea de tiempo" paralela para que puedas hacer cambios sin afectar el proyecto principal (`main`).

**Paso 2: Preparar los archivos para guardarlos (Añadir al "área de preparación")**
*   **Comando:** `git add .`
*   **Qué hace:** Pone todos tus archivos modificados en una "caja" listos para ser guardados.

**Paso 3: Hacer el guardado permanente (Hacer un "Commit")**
*   **Comando:** `git commit -m "Un mensaje que describa tu cambio"`
*   **Qué hace:** Guarda una "foto" de tus cambios en el historial de tu computadora.

**Paso 4: Subir tu trabajo a GitHub (Hacer "Push")**
*   **Comando:** `git push -u origin nombre-de-la-rama`
*   **Qué hace:** Sube tu rama con los cambios guardados a tu perfil de GitHub. Ahora tu trabajo está respaldado en internet.

---

#### **Fase 2: Integrar tus cambios en GitHub (El "Pull Request")**

**Paso 5: Mezclar tus cambios en la web**
*   **Acciones en GitHub.com:** `Crear Pull Request` -> `Merge` -> `Delete Branch`
*   **Qué haces:**
    1.  **Pides permiso** para incorporar tus cambios a la rama principal (`Pull Request`).
    2.  **Mezclas** tus cambios con la rama principal (`Merge`).
    3.  **Borras** la rama de internet, porque su trabajo ya terminó.

---

#### **Fase 3: Sincronizar y limpiar tu computadora**

**Paso 6: Volver a tu rama principal**
*   **Comando:** `git checkout main`
*   **Qué hace:** Regresas a la línea de tiempo principal en tu computadora.

**Paso 7: Actualizar tu computadora con lo último de GitHub (Hacer "Pull")**
*   **Comando:** `git pull origin main`
*   **Qué hace:** Descargas los cambios que se mezclaron en GitHub para que tu computadora tenga la versión más reciente.

**Paso 8: Borrar la rama que ya no usas**
*   **Comando:** `git branch -d nombre-de-la-rama`
*   **Qué hace:** Borras la rama temporal de tu computadora para dejar todo limpio y ordenado.

¡Y eso es todo! Este es el ciclo completo. Repetirás estos pasos una y otra vez en tus proyectos.
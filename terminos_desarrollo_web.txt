T√©rminos clave para guiar a una IA en el desarrollo de un proyecto

30. MVP (Minimum Viable Product)
"Haz una versi√≥n m√≠nima funcional del producto con solo las funciones esenciales para probar la idea."
‚úÖ Enfoque: r√°pido, funcional, para validar. 

31. Production-ready
"El c√≥digo debe estar listo para producci√≥n: optimizado, seguro, bien documentado y sin errores graves."
‚úÖ Enfoque: profesional, estable, listo para usuarios reales. 

32. SPA (Single Page Application)
"Crea una app web que carga una sola p√°gina y cambia el contenido din√°micamente sin recargar."
‚úÖ Ejemplo: apps como Gmail o React.
üõ†Ô∏è Tecnolog√≠as t√≠picas: React, Vue, Angular. 

33. Responsiva / Responsive Design
"El dise√±o debe adaptarse autom√°ticamente a m√≥viles, tablets y pantallas grandes."
‚úÖ Usa dise√±o flexible, grids y media queries. 

34. PWA (Progressive Web App)
"Haz una app web que se comporte como una app nativa: funcione sin internet, se pueda instalar, notificaciones, etc."
‚úÖ Ideal para apps m√≥viles sin app store. 

35. SSR (Server-Side Rendering)
"Genera las p√°ginas en el servidor antes de enviarlas al navegador."
‚úÖ Mejor SEO y velocidad inicial.
üîß Ejemplo: Next.js, Nuxt.js. 

36. CSR (Client-Side Rendering)
"La p√°gina se carga en el navegador y se actualiza con JavaScript."
‚úÖ M√°s din√°mico, pero peor SEO inicial.
üîß Ejemplo: React puro. 

37. API RESTful
"Crea una interfaz para que el frontend se comunique con el backend usando URLs claras y m√©todos HTTP (GET, POST, etc)."
‚úÖ Estructura est√°ndar y f√°cil de usar. 

38. GraphQL
"Usa GraphQL para que el frontend pida solo los datos que necesita, en una sola consulta."
‚úÖ M√°s eficiente que REST en algunos casos. 

39. Headless CMS
"Usa un sistema de gesti√≥n de contenidos sin interfaz visual, solo como base de datos que la app pueda consumir."
‚úÖ Ejemplo: Contentful, Strapi. Ideal para SPAs o PWAs. 

40. UI/UX consistente
"Sigue un dise√±o coherente: mismos colores, tipograf√≠as, botones y flujos de usuario en toda la app."
‚úÖ Mejora la experiencia y profesionalidad. 

41. Dark Mode / Light Mode
"Incluye un interruptor para cambiar entre tema oscuro y claro."
‚úÖ Mejora accesibilidad y comodidad visual. 

42. Accesible (WCAG)
"Haz que el sitio sea usable para personas con discapacidad: buen contraste, lectores de pantalla, teclado, etc."
‚úÖ Cumple est√°ndares internacionales de accesibilidad. 

43. Multi-idioma / i18n
"Prepara la app para soportar varios idiomas (espa√±ol, ingl√©s, etc)."
‚úÖ √ötil para llegar a m√°s usuarios. 

44. Modular / Escalable
"Estructura el c√≥digo en partes separadas (m√≥dulos) para que sea f√°cil de mantener y ampliar."
‚úÖ Evita c√≥digo "enmara√±ado". 

45. Real-time (en tiempo real)
"Actualiza la informaci√≥n autom√°ticamente sin recargar (como chats o notificaciones)."
üîß Tecnolog√≠as: WebSockets, Firebase, Socket.IO. 

46. Offline-first
"Dise√±a la app para que funcione incluso sin conexi√≥n, guardando datos localmente."
‚úÖ Ideal para PWAs o zonas con mala conexi√≥n. 

47. SEO-friendly
"Optimiza el sitio para que los motores de b√∫squeda lo indexen bien: metatags, URLs limpias, SSR, etc."
‚úÖ Para que aparezca en Google. 

48. CI/CD (Integraci√≥n y Despliegue Continuo)
"Automatiza pruebas y despliegues: cada cambio se prueba y sube autom√°ticamente."
‚úÖ Ahorra tiempo y reduce errores. 

49. Est√°tica (Static Site)
"Genera un sitio con p√°ginas pre-construidas, r√°pido y seguro (como un blog o portafolio)."
üîß Ejemplo: Gatsby, Hugo, Jekyll. 